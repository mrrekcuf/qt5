/*
 * THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT EDIT.
 *
 * This file was generated by the dom/make_names.pl script.
 *
 * Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "config.h"

#ifdef SKIP_STATIC_CONSTRUCTORS_ON_GCC
#define DOM_XLinkNAMES_HIDE_GLOBALS 1
#else
#define QNAME_DEFAULT_CONSTRUCTOR 1
#endif

#include "XLinkNames.h"

#include <wtf/StaticConstructors.h>
namespace WebCore {

namespace XLinkNames {

using namespace WebCore;

DEFINE_GLOBAL(AtomicString, xlinkNamespaceURI)

static const LChar showString8[] = "show";
static const LChar typeString8[] = "type";
static const LChar titleString8[] = "title";
static const LChar arcroleString8[] = "arcrole";
static const LChar hrefString8[] = "href";
static const LChar actuateString8[] = "actuate";
static const LChar roleString8[] = "role";

static StringImpl::StaticASCIILiteral showData = {
    StringImpl::StaticASCIILiteral::s_initialRefCount,
    4,
    showString8,
    0,
    StringImpl::StaticASCIILiteral::s_initialFlags | (3191658 << StringImpl::StaticASCIILiteral::s_hashShift)
};
static StringImpl::StaticASCIILiteral typeData = {
    StringImpl::StaticASCIILiteral::s_initialRefCount,
    4,
    typeString8,
    0,
    StringImpl::StaticASCIILiteral::s_initialFlags | (1916283 << StringImpl::StaticASCIILiteral::s_hashShift)
};
static StringImpl::StaticASCIILiteral titleData = {
    StringImpl::StaticASCIILiteral::s_initialRefCount,
    5,
    titleString8,
    0,
    StringImpl::StaticASCIILiteral::s_initialFlags | (2337488 << StringImpl::StaticASCIILiteral::s_hashShift)
};
static StringImpl::StaticASCIILiteral arcroleData = {
    StringImpl::StaticASCIILiteral::s_initialRefCount,
    7,
    arcroleString8,
    0,
    StringImpl::StaticASCIILiteral::s_initialFlags | (11561565 << StringImpl::StaticASCIILiteral::s_hashShift)
};
static StringImpl::StaticASCIILiteral hrefData = {
    StringImpl::StaticASCIILiteral::s_initialRefCount,
    4,
    hrefString8,
    0,
    StringImpl::StaticASCIILiteral::s_initialFlags | (5797448 << StringImpl::StaticASCIILiteral::s_hashShift)
};
static StringImpl::StaticASCIILiteral actuateData = {
    StringImpl::StaticASCIILiteral::s_initialRefCount,
    7,
    actuateString8,
    0,
    StringImpl::StaticASCIILiteral::s_initialFlags | (5578769 << StringImpl::StaticASCIILiteral::s_hashShift)
};
static StringImpl::StaticASCIILiteral roleData = {
    StringImpl::StaticASCIILiteral::s_initialRefCount,
    4,
    roleString8,
    0,
    StringImpl::StaticASCIILiteral::s_initialFlags | (16084934 << StringImpl::StaticASCIILiteral::s_hashShift)
};

static StringImpl* showImpl = reinterpret_cast<StringImpl*>(&showData);
static StringImpl* typeImpl = reinterpret_cast<StringImpl*>(&typeData);
static StringImpl* titleImpl = reinterpret_cast<StringImpl*>(&titleData);
static StringImpl* arcroleImpl = reinterpret_cast<StringImpl*>(&arcroleData);
static StringImpl* hrefImpl = reinterpret_cast<StringImpl*>(&hrefData);
static StringImpl* actuateImpl = reinterpret_cast<StringImpl*>(&actuateData);
static StringImpl* roleImpl = reinterpret_cast<StringImpl*>(&roleData);


// Attributes
DEFINE_GLOBAL(QualifiedName, actuateAttr)
DEFINE_GLOBAL(QualifiedName, arcroleAttr)
DEFINE_GLOBAL(QualifiedName, hrefAttr)
DEFINE_GLOBAL(QualifiedName, roleAttr)
DEFINE_GLOBAL(QualifiedName, showAttr)
DEFINE_GLOBAL(QualifiedName, titleAttr)
DEFINE_GLOBAL(QualifiedName, typeAttr)


WebCore::QualifiedName** getXLinkAttrs()
{
    static WebCore::QualifiedName* XLinkAttr[] = {
        (WebCore::QualifiedName*)&actuateAttr,
        (WebCore::QualifiedName*)&arcroleAttr,
        (WebCore::QualifiedName*)&hrefAttr,
        (WebCore::QualifiedName*)&roleAttr,
        (WebCore::QualifiedName*)&showAttr,
        (WebCore::QualifiedName*)&titleAttr,
        (WebCore::QualifiedName*)&typeAttr,
    };
    return XLinkAttr;
}

void init()
{
    static bool initialized = false;
    if (initialized)
        return;
    initialized = true;

    // Use placement new to initialize the globals.

    AtomicString::init();
    AtomicString xlinkNS("http://www.w3.org/1999/xlink", AtomicString::ConstructFromLiteral);

    // Namespace
    new (NotNull, (void*)&xlinkNamespaceURI) AtomicString(xlinkNS);

#ifndef NDEBUG
    roleImpl->assertHashIsCorrect();
    arcroleImpl->assertHashIsCorrect();
    actuateImpl->assertHashIsCorrect();
    hrefImpl->assertHashIsCorrect();
    titleImpl->assertHashIsCorrect();
    typeImpl->assertHashIsCorrect();
    showImpl->assertHashIsCorrect();
#endif // NDEBUG

    // Attributes
    createQualifiedName((void*)&actuateAttr, actuateImpl, xlinkNS);
    createQualifiedName((void*)&arcroleAttr, arcroleImpl, xlinkNS);
    createQualifiedName((void*)&hrefAttr, hrefImpl, xlinkNS);
    createQualifiedName((void*)&roleAttr, roleImpl, xlinkNS);
    createQualifiedName((void*)&showAttr, showImpl, xlinkNS);
    createQualifiedName((void*)&titleAttr, titleImpl, xlinkNS);
    createQualifiedName((void*)&typeAttr, typeImpl, xlinkNS);
}

} }

