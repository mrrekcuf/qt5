/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(FONT_LOAD_EVENTS)

#include "JSCSSFontFaceLoadEvent.h"

#include "CSSFontFaceLoadEvent.h"
#include "CSSFontFaceRule.h"
#include "DOMError.h"
#include "JSCSSFontFaceRule.h"
#include "JSDOMError.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSCSSFontFaceLoadEventTableValues[] =
{
    { "fontface", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsCSSFontFaceLoadEventFontface), (intptr_t)0, NoIntrinsic },
    { "error", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsCSSFontFaceLoadEventError), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSCSSFontFaceLoadEventTable = { 4, 3, JSCSSFontFaceLoadEventTableValues, 0 };
/* Hash table for prototype */

static const HashTableValue JSCSSFontFaceLoadEventPrototypeTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSCSSFontFaceLoadEventPrototypeTable = { 1, 0, JSCSSFontFaceLoadEventPrototypeTableValues, 0 };
static const HashTable* getJSCSSFontFaceLoadEventPrototypeTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->vm(), &JSCSSFontFaceLoadEventPrototypeTable);
}

const ClassInfo JSCSSFontFaceLoadEventPrototype::s_info = { "CSSFontFaceLoadEventPrototype", &Base::s_info, 0, getJSCSSFontFaceLoadEventPrototypeTable, CREATE_METHOD_TABLE(JSCSSFontFaceLoadEventPrototype) };

JSObject* JSCSSFontFaceLoadEventPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSCSSFontFaceLoadEvent>(exec, globalObject);
}

static const HashTable* getJSCSSFontFaceLoadEventTable(ExecState* exec)
{
    return getHashTableForGlobalData(exec->vm(), &JSCSSFontFaceLoadEventTable);
}

const ClassInfo JSCSSFontFaceLoadEvent::s_info = { "CSSFontFaceLoadEvent", &Base::s_info, 0, getJSCSSFontFaceLoadEventTable , CREATE_METHOD_TABLE(JSCSSFontFaceLoadEvent) };

JSCSSFontFaceLoadEvent::JSCSSFontFaceLoadEvent(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<CSSFontFaceLoadEvent> impl)
    : JSEvent(structure, globalObject, impl)
{
}

void JSCSSFontFaceLoadEvent::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(&s_info));
}

JSObject* JSCSSFontFaceLoadEvent::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSCSSFontFaceLoadEventPrototype::create(exec->vm(), globalObject, JSCSSFontFaceLoadEventPrototype::createStructure(exec->vm(), globalObject, JSEventPrototype::self(exec, globalObject)));
}

bool JSCSSFontFaceLoadEvent::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSCSSFontFaceLoadEvent* thisObject = jsCast<JSCSSFontFaceLoadEvent*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSCSSFontFaceLoadEvent, Base>(exec, getJSCSSFontFaceLoadEventTable(exec), thisObject, propertyName, slot);
}

bool JSCSSFontFaceLoadEvent::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    JSCSSFontFaceLoadEvent* thisObject = jsCast<JSCSSFontFaceLoadEvent*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSCSSFontFaceLoadEvent, Base>(exec, getJSCSSFontFaceLoadEventTable(exec), thisObject, propertyName, descriptor);
}

JSValue jsCSSFontFaceLoadEventFontface(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSCSSFontFaceLoadEvent* castedThis = jsCast<JSCSSFontFaceLoadEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    CSSFontFaceLoadEvent* impl = static_cast<CSSFontFaceLoadEvent*>(castedThis->impl());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->fontface()));
    return result;
}


JSValue jsCSSFontFaceLoadEventError(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSCSSFontFaceLoadEvent* castedThis = jsCast<JSCSSFontFaceLoadEvent*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    CSSFontFaceLoadEvent* impl = static_cast<CSSFontFaceLoadEvent*>(castedThis->impl());
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl->error()));
    return result;
}



}

#endif // ENABLE(FONT_LOAD_EVENTS)
