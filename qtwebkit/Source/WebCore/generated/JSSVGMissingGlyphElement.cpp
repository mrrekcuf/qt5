/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(SVG) && ENABLE(SVG_FONTS)

#include "JSSVGMissingGlyphElement.h"

#include "SVGMissingGlyphElement.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSSVGMissingGlyphElementTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGMissingGlyphElementConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSSVGMissingGlyphElementTable = { 2, 1, JSSVGMissingGlyphElementTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSSVGMissingGlyphElementConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSSVGMissingGlyphElementConstructorTable = { 1, 0, JSSVGMissingGlyphElementConstructorTableValues, 0 };
const ClassInfo JSSVGMissingGlyphElementConstructor::s_info = { "SVGMissingGlyphElementConstructor", &Base::s_info, &JSSVGMissingGlyphElementConstructorTable, 0, CREATE_METHOD_TABLE(JSSVGMissingGlyphElementConstructor) };

JSSVGMissingGlyphElementConstructor::JSSVGMissingGlyphElementConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSSVGMissingGlyphElementConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->vm());
    ASSERT(inherits(&s_info));
    putDirect(exec->vm(), exec->propertyNames().prototype, JSSVGMissingGlyphElementPrototype::self(exec, globalObject), DontDelete | ReadOnly);
    putDirect(exec->vm(), exec->propertyNames().length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSSVGMissingGlyphElementConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGMissingGlyphElementConstructor, JSDOMWrapper>(exec, &JSSVGMissingGlyphElementConstructorTable, jsCast<JSSVGMissingGlyphElementConstructor*>(cell), propertyName, slot);
}

bool JSSVGMissingGlyphElementConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSSVGMissingGlyphElementConstructor, JSDOMWrapper>(exec, &JSSVGMissingGlyphElementConstructorTable, jsCast<JSSVGMissingGlyphElementConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSSVGMissingGlyphElementPrototypeTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSSVGMissingGlyphElementPrototypeTable = { 1, 0, JSSVGMissingGlyphElementPrototypeTableValues, 0 };
const ClassInfo JSSVGMissingGlyphElementPrototype::s_info = { "SVGMissingGlyphElementPrototype", &Base::s_info, &JSSVGMissingGlyphElementPrototypeTable, 0, CREATE_METHOD_TABLE(JSSVGMissingGlyphElementPrototype) };

JSObject* JSSVGMissingGlyphElementPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGMissingGlyphElement>(exec, globalObject);
}

const ClassInfo JSSVGMissingGlyphElement::s_info = { "SVGMissingGlyphElement", &Base::s_info, &JSSVGMissingGlyphElementTable, 0 , CREATE_METHOD_TABLE(JSSVGMissingGlyphElement) };

JSSVGMissingGlyphElement::JSSVGMissingGlyphElement(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<SVGMissingGlyphElement> impl)
    : JSSVGStyledElement(structure, globalObject, impl)
{
}

void JSSVGMissingGlyphElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(&s_info));
}

JSObject* JSSVGMissingGlyphElement::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSSVGMissingGlyphElementPrototype::create(exec->vm(), globalObject, JSSVGMissingGlyphElementPrototype::createStructure(exec->vm(), globalObject, JSSVGStyledElementPrototype::self(exec, globalObject)));
}

bool JSSVGMissingGlyphElement::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSSVGMissingGlyphElement* thisObject = jsCast<JSSVGMissingGlyphElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSSVGMissingGlyphElement, Base>(exec, &JSSVGMissingGlyphElementTable, thisObject, propertyName, slot);
}

bool JSSVGMissingGlyphElement::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    JSSVGMissingGlyphElement* thisObject = jsCast<JSSVGMissingGlyphElement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSSVGMissingGlyphElement, Base>(exec, &JSSVGMissingGlyphElementTable, thisObject, propertyName, descriptor);
}

JSValue jsSVGMissingGlyphElementConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGMissingGlyphElement* domObject = jsCast<JSSVGMissingGlyphElement*>(asObject(slotBase));
    return JSSVGMissingGlyphElement::getConstructor(exec, domObject->globalObject());
}

JSValue JSSVGMissingGlyphElement::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGMissingGlyphElementConstructor>(exec, jsCast<JSDOMGlobalObject*>(globalObject));
}


}

#endif // ENABLE(SVG) && ENABLE(SVG_FONTS)
