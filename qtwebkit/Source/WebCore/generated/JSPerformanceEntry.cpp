/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(PERFORMANCE_TIMELINE)

#include "JSPerformanceEntry.h"

#include "KURL.h"
#include "PerformanceEntry.h"
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSPerformanceEntryTableValues[] =
{
    { "name", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPerformanceEntryName), (intptr_t)0, NoIntrinsic },
    { "entryType", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPerformanceEntryEntryType), (intptr_t)0, NoIntrinsic },
    { "startTime", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPerformanceEntryStartTime), (intptr_t)0, NoIntrinsic },
    { "duration", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPerformanceEntryDuration), (intptr_t)0, NoIntrinsic },
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPerformanceEntryConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSPerformanceEntryTable = { 17, 15, JSPerformanceEntryTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSPerformanceEntryConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSPerformanceEntryConstructorTable = { 1, 0, JSPerformanceEntryConstructorTableValues, 0 };
const ClassInfo JSPerformanceEntryConstructor::s_info = { "PerformanceEntryConstructor", &Base::s_info, &JSPerformanceEntryConstructorTable, 0, CREATE_METHOD_TABLE(JSPerformanceEntryConstructor) };

JSPerformanceEntryConstructor::JSPerformanceEntryConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSPerformanceEntryConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->vm());
    ASSERT(inherits(&s_info));
    putDirect(exec->vm(), exec->propertyNames().prototype, JSPerformanceEntryPrototype::self(exec, globalObject), DontDelete | ReadOnly);
    putDirect(exec->vm(), exec->propertyNames().length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSPerformanceEntryConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSPerformanceEntryConstructor, JSDOMWrapper>(exec, &JSPerformanceEntryConstructorTable, jsCast<JSPerformanceEntryConstructor*>(cell), propertyName, slot);
}

bool JSPerformanceEntryConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSPerformanceEntryConstructor, JSDOMWrapper>(exec, &JSPerformanceEntryConstructorTable, jsCast<JSPerformanceEntryConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSPerformanceEntryPrototypeTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSPerformanceEntryPrototypeTable = { 1, 0, JSPerformanceEntryPrototypeTableValues, 0 };
const ClassInfo JSPerformanceEntryPrototype::s_info = { "PerformanceEntryPrototype", &Base::s_info, &JSPerformanceEntryPrototypeTable, 0, CREATE_METHOD_TABLE(JSPerformanceEntryPrototype) };

JSObject* JSPerformanceEntryPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSPerformanceEntry>(exec, globalObject);
}

const ClassInfo JSPerformanceEntry::s_info = { "PerformanceEntry", &Base::s_info, &JSPerformanceEntryTable, 0 , CREATE_METHOD_TABLE(JSPerformanceEntry) };

JSPerformanceEntry::JSPerformanceEntry(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<PerformanceEntry> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSPerformanceEntry::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(&s_info));
}

JSObject* JSPerformanceEntry::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSPerformanceEntryPrototype::create(exec->vm(), globalObject, JSPerformanceEntryPrototype::createStructure(globalObject->vm(), globalObject, globalObject->objectPrototype()));
}

void JSPerformanceEntry::destroy(JSC::JSCell* cell)
{
    JSPerformanceEntry* thisObject = static_cast<JSPerformanceEntry*>(cell);
    thisObject->JSPerformanceEntry::~JSPerformanceEntry();
}

JSPerformanceEntry::~JSPerformanceEntry()
{
    releaseImplIfNotNull();
}

bool JSPerformanceEntry::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSPerformanceEntry* thisObject = jsCast<JSPerformanceEntry*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSPerformanceEntry, Base>(exec, &JSPerformanceEntryTable, thisObject, propertyName, slot);
}

bool JSPerformanceEntry::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    JSPerformanceEntry* thisObject = jsCast<JSPerformanceEntry*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSPerformanceEntry, Base>(exec, &JSPerformanceEntryTable, thisObject, propertyName, descriptor);
}

JSValue jsPerformanceEntryName(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSPerformanceEntry* castedThis = jsCast<JSPerformanceEntry*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    PerformanceEntry* impl = static_cast<PerformanceEntry*>(castedThis->impl());
    JSValue result = jsStringWithCache(exec, impl->name());
    return result;
}


JSValue jsPerformanceEntryEntryType(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSPerformanceEntry* castedThis = jsCast<JSPerformanceEntry*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    PerformanceEntry* impl = static_cast<PerformanceEntry*>(castedThis->impl());
    JSValue result = jsStringWithCache(exec, impl->entryType());
    return result;
}


JSValue jsPerformanceEntryStartTime(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSPerformanceEntry* castedThis = jsCast<JSPerformanceEntry*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    PerformanceEntry* impl = static_cast<PerformanceEntry*>(castedThis->impl());
    JSValue result = jsNumber(impl->startTime());
    return result;
}


JSValue jsPerformanceEntryDuration(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSPerformanceEntry* castedThis = jsCast<JSPerformanceEntry*>(asObject(slotBase));
    UNUSED_PARAM(exec);
    PerformanceEntry* impl = static_cast<PerformanceEntry*>(castedThis->impl());
    JSValue result = jsNumber(impl->duration());
    return result;
}


JSValue jsPerformanceEntryConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSPerformanceEntry* domObject = jsCast<JSPerformanceEntry*>(asObject(slotBase));
    return JSPerformanceEntry::getConstructor(exec, domObject->globalObject());
}

JSValue JSPerformanceEntry::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSPerformanceEntryConstructor>(exec, jsCast<JSDOMGlobalObject*>(globalObject));
}

static inline bool isObservable(JSPerformanceEntry* jsPerformanceEntry)
{
    if (jsPerformanceEntry->hasCustomProperties())
        return true;
    return false;
}

bool JSPerformanceEntryOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSPerformanceEntry* jsPerformanceEntry = jsCast<JSPerformanceEntry*>(handle.get().asCell());
    if (!isObservable(jsPerformanceEntry))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSPerformanceEntryOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSPerformanceEntry* jsPerformanceEntry = jsCast<JSPerformanceEntry*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsPerformanceEntry->impl(), jsPerformanceEntry);
    jsPerformanceEntry->releaseImpl();
}

PerformanceEntry* toPerformanceEntry(JSC::JSValue value)
{
    return value.inherits(&JSPerformanceEntry::s_info) ? jsCast<JSPerformanceEntry*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(PERFORMANCE_TIMELINE)
