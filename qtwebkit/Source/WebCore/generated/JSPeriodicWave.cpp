/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUDIO)

#include "JSPeriodicWave.h"

#include "PeriodicWave.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSPeriodicWaveTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPeriodicWaveConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSPeriodicWaveTable = { 2, 1, JSPeriodicWaveTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSPeriodicWaveConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSPeriodicWaveConstructorTable = { 1, 0, JSPeriodicWaveConstructorTableValues, 0 };
const ClassInfo JSPeriodicWaveConstructor::s_info = { "PeriodicWaveConstructor", &Base::s_info, &JSPeriodicWaveConstructorTable, 0, CREATE_METHOD_TABLE(JSPeriodicWaveConstructor) };

JSPeriodicWaveConstructor::JSPeriodicWaveConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSPeriodicWaveConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->vm());
    ASSERT(inherits(&s_info));
    putDirect(exec->vm(), exec->propertyNames().prototype, JSPeriodicWavePrototype::self(exec, globalObject), DontDelete | ReadOnly);
    putDirect(exec->vm(), exec->propertyNames().length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSPeriodicWaveConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSPeriodicWaveConstructor, JSDOMWrapper>(exec, &JSPeriodicWaveConstructorTable, jsCast<JSPeriodicWaveConstructor*>(cell), propertyName, slot);
}

bool JSPeriodicWaveConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSPeriodicWaveConstructor, JSDOMWrapper>(exec, &JSPeriodicWaveConstructorTable, jsCast<JSPeriodicWaveConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSPeriodicWavePrototypeTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSPeriodicWavePrototypeTable = { 1, 0, JSPeriodicWavePrototypeTableValues, 0 };
const ClassInfo JSPeriodicWavePrototype::s_info = { "PeriodicWavePrototype", &Base::s_info, &JSPeriodicWavePrototypeTable, 0, CREATE_METHOD_TABLE(JSPeriodicWavePrototype) };

JSObject* JSPeriodicWavePrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSPeriodicWave>(exec, globalObject);
}

const ClassInfo JSPeriodicWave::s_info = { "PeriodicWave", &Base::s_info, &JSPeriodicWaveTable, 0 , CREATE_METHOD_TABLE(JSPeriodicWave) };

JSPeriodicWave::JSPeriodicWave(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<PeriodicWave> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSPeriodicWave::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(&s_info));
}

JSObject* JSPeriodicWave::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSPeriodicWavePrototype::create(exec->vm(), globalObject, JSPeriodicWavePrototype::createStructure(globalObject->vm(), globalObject, globalObject->objectPrototype()));
}

void JSPeriodicWave::destroy(JSC::JSCell* cell)
{
    JSPeriodicWave* thisObject = static_cast<JSPeriodicWave*>(cell);
    thisObject->JSPeriodicWave::~JSPeriodicWave();
}

JSPeriodicWave::~JSPeriodicWave()
{
    releaseImplIfNotNull();
}

bool JSPeriodicWave::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSPeriodicWave* thisObject = jsCast<JSPeriodicWave*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSPeriodicWave, Base>(exec, &JSPeriodicWaveTable, thisObject, propertyName, slot);
}

bool JSPeriodicWave::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    JSPeriodicWave* thisObject = jsCast<JSPeriodicWave*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSPeriodicWave, Base>(exec, &JSPeriodicWaveTable, thisObject, propertyName, descriptor);
}

JSValue jsPeriodicWaveConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSPeriodicWave* domObject = jsCast<JSPeriodicWave*>(asObject(slotBase));
    return JSPeriodicWave::getConstructor(exec, domObject->globalObject());
}

JSValue JSPeriodicWave::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSPeriodicWaveConstructor>(exec, jsCast<JSDOMGlobalObject*>(globalObject));
}

static inline bool isObservable(JSPeriodicWave* jsPeriodicWave)
{
    if (jsPeriodicWave->hasCustomProperties())
        return true;
    return false;
}

bool JSPeriodicWaveOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSPeriodicWave* jsPeriodicWave = jsCast<JSPeriodicWave*>(handle.get().asCell());
    if (!isObservable(jsPeriodicWave))
        return false;
    UNUSED_PARAM(visitor);
    return false;
}

void JSPeriodicWaveOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSPeriodicWave* jsPeriodicWave = jsCast<JSPeriodicWave*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsPeriodicWave->impl(), jsPeriodicWave);
    jsPeriodicWave->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, PeriodicWave* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSPeriodicWave>(exec, impl))
        return result;
#if COMPILER(CLANG) && COMPILER_SUPPORTS(CXX_STATIC_ASSERT)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to PeriodicWave.
    COMPILE_ASSERT(!__is_polymorphic(PeriodicWave), PeriodicWave_is_polymorphic_but_idl_claims_not_to_be);
#endif
    ReportMemoryCost<PeriodicWave>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSPeriodicWave>(exec, globalObject, impl);
}

PeriodicWave* toPeriodicWave(JSC::JSValue value)
{
    return value.inherits(&JSPeriodicWave::s_info) ? jsCast<JSPeriodicWave*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(WEB_AUDIO)
