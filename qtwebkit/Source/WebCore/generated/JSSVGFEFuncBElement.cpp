/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(FILTERS) && ENABLE(SVG)

#include "JSSVGFEFuncBElement.h"

#include "SVGFEFuncBElement.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSSVGFEFuncBElementTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEFuncBElementConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSSVGFEFuncBElementTable = { 2, 1, JSSVGFEFuncBElementTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSSVGFEFuncBElementConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSSVGFEFuncBElementConstructorTable = { 1, 0, JSSVGFEFuncBElementConstructorTableValues, 0 };
const ClassInfo JSSVGFEFuncBElementConstructor::s_info = { "SVGFEFuncBElementConstructor", &Base::s_info, &JSSVGFEFuncBElementConstructorTable, 0, CREATE_METHOD_TABLE(JSSVGFEFuncBElementConstructor) };

JSSVGFEFuncBElementConstructor::JSSVGFEFuncBElementConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSSVGFEFuncBElementConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->vm());
    ASSERT(inherits(&s_info));
    putDirect(exec->vm(), exec->propertyNames().prototype, JSSVGFEFuncBElementPrototype::self(exec, globalObject), DontDelete | ReadOnly);
    putDirect(exec->vm(), exec->propertyNames().length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSSVGFEFuncBElementConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGFEFuncBElementConstructor, JSDOMWrapper>(exec, &JSSVGFEFuncBElementConstructorTable, jsCast<JSSVGFEFuncBElementConstructor*>(cell), propertyName, slot);
}

bool JSSVGFEFuncBElementConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSSVGFEFuncBElementConstructor, JSDOMWrapper>(exec, &JSSVGFEFuncBElementConstructorTable, jsCast<JSSVGFEFuncBElementConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSSVGFEFuncBElementPrototypeTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSSVGFEFuncBElementPrototypeTable = { 1, 0, JSSVGFEFuncBElementPrototypeTableValues, 0 };
const ClassInfo JSSVGFEFuncBElementPrototype::s_info = { "SVGFEFuncBElementPrototype", &Base::s_info, &JSSVGFEFuncBElementPrototypeTable, 0, CREATE_METHOD_TABLE(JSSVGFEFuncBElementPrototype) };

JSObject* JSSVGFEFuncBElementPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGFEFuncBElement>(exec, globalObject);
}

const ClassInfo JSSVGFEFuncBElement::s_info = { "SVGFEFuncBElement", &Base::s_info, &JSSVGFEFuncBElementTable, 0 , CREATE_METHOD_TABLE(JSSVGFEFuncBElement) };

JSSVGFEFuncBElement::JSSVGFEFuncBElement(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<SVGFEFuncBElement> impl)
    : JSSVGComponentTransferFunctionElement(structure, globalObject, impl)
{
}

void JSSVGFEFuncBElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(&s_info));
}

JSObject* JSSVGFEFuncBElement::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSSVGFEFuncBElementPrototype::create(exec->vm(), globalObject, JSSVGFEFuncBElementPrototype::createStructure(exec->vm(), globalObject, JSSVGComponentTransferFunctionElementPrototype::self(exec, globalObject)));
}

bool JSSVGFEFuncBElement::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSSVGFEFuncBElement* thisObject = jsCast<JSSVGFEFuncBElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSSVGFEFuncBElement, Base>(exec, &JSSVGFEFuncBElementTable, thisObject, propertyName, slot);
}

bool JSSVGFEFuncBElement::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    JSSVGFEFuncBElement* thisObject = jsCast<JSSVGFEFuncBElement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSSVGFEFuncBElement, Base>(exec, &JSSVGFEFuncBElementTable, thisObject, propertyName, descriptor);
}

JSValue jsSVGFEFuncBElementConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGFEFuncBElement* domObject = jsCast<JSSVGFEFuncBElement*>(asObject(slotBase));
    return JSSVGFEFuncBElement::getConstructor(exec, domObject->globalObject());
}

JSValue JSSVGFEFuncBElement::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGFEFuncBElementConstructor>(exec, jsCast<JSDOMGlobalObject*>(globalObject));
}


}

#endif // ENABLE(FILTERS) && ENABLE(SVG)
