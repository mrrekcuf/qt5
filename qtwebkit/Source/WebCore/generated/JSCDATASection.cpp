/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSCDATASection.h"

#include "CDATASection.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSCDATASectionTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsCDATASectionConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSCDATASectionTable = { 2, 1, JSCDATASectionTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSCDATASectionConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSCDATASectionConstructorTable = { 1, 0, JSCDATASectionConstructorTableValues, 0 };
const ClassInfo JSCDATASectionConstructor::s_info = { "CDATASectionConstructor", &Base::s_info, &JSCDATASectionConstructorTable, 0, CREATE_METHOD_TABLE(JSCDATASectionConstructor) };

JSCDATASectionConstructor::JSCDATASectionConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSCDATASectionConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->vm());
    ASSERT(inherits(&s_info));
    putDirect(exec->vm(), exec->propertyNames().prototype, JSCDATASectionPrototype::self(exec, globalObject), DontDelete | ReadOnly);
    putDirect(exec->vm(), exec->propertyNames().length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSCDATASectionConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSCDATASectionConstructor, JSDOMWrapper>(exec, &JSCDATASectionConstructorTable, jsCast<JSCDATASectionConstructor*>(cell), propertyName, slot);
}

bool JSCDATASectionConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSCDATASectionConstructor, JSDOMWrapper>(exec, &JSCDATASectionConstructorTable, jsCast<JSCDATASectionConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSCDATASectionPrototypeTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSCDATASectionPrototypeTable = { 1, 0, JSCDATASectionPrototypeTableValues, 0 };
const ClassInfo JSCDATASectionPrototype::s_info = { "CDATASectionPrototype", &Base::s_info, &JSCDATASectionPrototypeTable, 0, CREATE_METHOD_TABLE(JSCDATASectionPrototype) };

JSObject* JSCDATASectionPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSCDATASection>(exec, globalObject);
}

const ClassInfo JSCDATASection::s_info = { "CDATASection", &Base::s_info, &JSCDATASectionTable, 0 , CREATE_METHOD_TABLE(JSCDATASection) };

JSCDATASection::JSCDATASection(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<CDATASection> impl)
    : JSText(structure, globalObject, impl)
{
}

void JSCDATASection::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(&s_info));
}

JSObject* JSCDATASection::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSCDATASectionPrototype::create(exec->vm(), globalObject, JSCDATASectionPrototype::createStructure(exec->vm(), globalObject, JSTextPrototype::self(exec, globalObject)));
}

bool JSCDATASection::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSCDATASection* thisObject = jsCast<JSCDATASection*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSCDATASection, Base>(exec, &JSCDATASectionTable, thisObject, propertyName, slot);
}

bool JSCDATASection::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    JSCDATASection* thisObject = jsCast<JSCDATASection*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSCDATASection, Base>(exec, &JSCDATASectionTable, thisObject, propertyName, descriptor);
}

JSValue jsCDATASectionConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSCDATASection* domObject = jsCast<JSCDATASection*>(asObject(slotBase));
    return JSCDATASection::getConstructor(exec, domObject->globalObject());
}

JSValue JSCDATASection::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSCDATASectionConstructor>(exec, jsCast<JSDOMGlobalObject*>(globalObject));
}


}
