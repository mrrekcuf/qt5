/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#ifndef JSMouseEvent_h
#define JSMouseEvent_h

#include "JSDOMBinding.h"
#include "JSUIEvent.h"
#include "MouseEvent.h"
#include <runtime/JSObject.h>

namespace WebCore {

class JSDictionary;

class JSMouseEvent : public JSUIEvent {
public:
    typedef JSUIEvent Base;
    static JSMouseEvent* create(JSC::Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<MouseEvent> impl)
    {
        JSMouseEvent* ptr = new (NotNull, JSC::allocateCell<JSMouseEvent>(globalObject->vm().heap)) JSMouseEvent(structure, globalObject, impl);
        ptr->finishCreation(globalObject->vm());
        return ptr;
    }

    static JSC::JSObject* createPrototype(JSC::ExecState*, JSC::JSGlobalObject*);
    static bool getOwnPropertySlot(JSC::JSCell*, JSC::ExecState*, JSC::PropertyName, JSC::PropertySlot&);
    static bool getOwnPropertyDescriptor(JSC::JSObject*, JSC::ExecState*, JSC::PropertyName, JSC::PropertyDescriptor&);
    static const JSC::ClassInfo s_info;

    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), &s_info);
    }

    static JSC::JSValue getConstructor(JSC::ExecState*, JSC::JSGlobalObject*);
protected:
    JSMouseEvent(JSC::Structure*, JSDOMGlobalObject*, PassRefPtr<MouseEvent>);
    void finishCreation(JSC::VM&);
    static const unsigned StructureFlags = JSC::InterceptsGetOwnPropertySlotByIndexEvenWhenLengthIsNotZero | JSC::OverridesGetOwnPropertySlot | Base::StructureFlags;
};


class JSMouseEventPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSC::JSObject* self(JSC::ExecState*, JSC::JSGlobalObject*);
    static JSMouseEventPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMouseEventPrototype* ptr = new (NotNull, JSC::allocateCell<JSMouseEventPrototype>(vm.heap)) JSMouseEventPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    static const JSC::ClassInfo s_info;
    static bool getOwnPropertySlot(JSC::JSCell*, JSC::ExecState*, JSC::PropertyName, JSC::PropertySlot&);
    static bool getOwnPropertyDescriptor(JSC::JSObject*, JSC::ExecState*, JSC::PropertyName, JSC::PropertyDescriptor&);
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), &s_info);
    }

private:
    JSMouseEventPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure) : JSC::JSNonFinalObject(vm, structure) { }
protected:
    static const unsigned StructureFlags = JSC::OverridesGetOwnPropertySlot | Base::StructureFlags;
};

class JSMouseEventConstructor : public DOMConstructorObject {
private:
    JSMouseEventConstructor(JSC::Structure*, JSDOMGlobalObject*);
    void finishCreation(JSC::ExecState*, JSDOMGlobalObject*);

public:
    typedef DOMConstructorObject Base;
    static JSMouseEventConstructor* create(JSC::ExecState* exec, JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSMouseEventConstructor* ptr = new (NotNull, JSC::allocateCell<JSMouseEventConstructor>(*exec->heap())) JSMouseEventConstructor(structure, globalObject);
        ptr->finishCreation(exec, globalObject);
        return ptr;
    }

    static bool getOwnPropertySlot(JSC::JSCell*, JSC::ExecState*, JSC::PropertyName, JSC::PropertySlot&);
    static bool getOwnPropertyDescriptor(JSC::JSObject*, JSC::ExecState*, JSC::PropertyName, JSC::PropertyDescriptor&);
    static const JSC::ClassInfo s_info;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), &s_info);
    }
protected:
    static const unsigned StructureFlags = JSC::OverridesGetOwnPropertySlot | JSC::ImplementsHasInstance | DOMConstructorObject::StructureFlags;
    static JSC::EncodedJSValue JSC_HOST_CALL constructJSMouseEvent(JSC::ExecState*);
#if ENABLE(DOM4_EVENTS_CONSTRUCTOR)
    static JSC::ConstructType getConstructData(JSC::JSCell*, JSC::ConstructData&);
#endif // ENABLE(DOM4_EVENTS_CONSTRUCTOR)
};

bool fillMouseEventInit(MouseEventInit&, JSDictionary&);

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsMouseEventPrototypeFunctionInitMouseEvent(JSC::ExecState*);
// Attributes

JSC::JSValue jsMouseEventScreenX(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsMouseEventScreenY(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsMouseEventClientX(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsMouseEventClientY(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsMouseEventCtrlKey(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsMouseEventShiftKey(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsMouseEventAltKey(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsMouseEventMetaKey(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsMouseEventButton(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsMouseEventRelatedTarget(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
#if ENABLE(POINTER_LOCK)
JSC::JSValue jsMouseEventWebkitMovementX(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
#endif
#if ENABLE(POINTER_LOCK)
JSC::JSValue jsMouseEventWebkitMovementY(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
#endif
JSC::JSValue jsMouseEventOffsetX(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsMouseEventOffsetY(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsMouseEventX(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsMouseEventY(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsMouseEventFromElement(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsMouseEventToElement(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsMouseEventDataTransfer(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);
JSC::JSValue jsMouseEventConstructor(JSC::ExecState*, JSC::JSValue, JSC::PropertyName);

} // namespace WebCore

#endif
