/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(SVG)

#include "JSSVGSetElement.h"

#include "SVGSetElement.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSSVGSetElementTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGSetElementConstructor), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSSVGSetElementTable = { 2, 1, JSSVGSetElementTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSSVGSetElementConstructorTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSSVGSetElementConstructorTable = { 1, 0, JSSVGSetElementConstructorTableValues, 0 };
const ClassInfo JSSVGSetElementConstructor::s_info = { "SVGSetElementConstructor", &Base::s_info, &JSSVGSetElementConstructorTable, 0, CREATE_METHOD_TABLE(JSSVGSetElementConstructor) };

JSSVGSetElementConstructor::JSSVGSetElementConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSSVGSetElementConstructor::finishCreation(ExecState* exec, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(exec->vm());
    ASSERT(inherits(&s_info));
    putDirect(exec->vm(), exec->propertyNames().prototype, JSSVGSetElementPrototype::self(exec, globalObject), DontDelete | ReadOnly);
    putDirect(exec->vm(), exec->propertyNames().length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSSVGSetElementConstructor::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGSetElementConstructor, JSDOMWrapper>(exec, &JSSVGSetElementConstructorTable, jsCast<JSSVGSetElementConstructor*>(cell), propertyName, slot);
}

bool JSSVGSetElementConstructor::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    return getStaticValueDescriptor<JSSVGSetElementConstructor, JSDOMWrapper>(exec, &JSSVGSetElementConstructorTable, jsCast<JSSVGSetElementConstructor*>(object), propertyName, descriptor);
}

/* Hash table for prototype */

static const HashTableValue JSSVGSetElementPrototypeTableValues[] =
{
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSSVGSetElementPrototypeTable = { 1, 0, JSSVGSetElementPrototypeTableValues, 0 };
const ClassInfo JSSVGSetElementPrototype::s_info = { "SVGSetElementPrototype", &Base::s_info, &JSSVGSetElementPrototypeTable, 0, CREATE_METHOD_TABLE(JSSVGSetElementPrototype) };

JSObject* JSSVGSetElementPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGSetElement>(exec, globalObject);
}

const ClassInfo JSSVGSetElement::s_info = { "SVGSetElement", &Base::s_info, &JSSVGSetElementTable, 0 , CREATE_METHOD_TABLE(JSSVGSetElement) };

JSSVGSetElement::JSSVGSetElement(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<SVGSetElement> impl)
    : JSSVGAnimationElement(structure, globalObject, impl)
{
}

void JSSVGSetElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(&s_info));
}

JSObject* JSSVGSetElement::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSSVGSetElementPrototype::create(exec->vm(), globalObject, JSSVGSetElementPrototype::createStructure(exec->vm(), globalObject, JSSVGAnimationElementPrototype::self(exec, globalObject)));
}

bool JSSVGSetElement::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSSVGSetElement* thisObject = jsCast<JSSVGSetElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueSlot<JSSVGSetElement, Base>(exec, &JSSVGSetElementTable, thisObject, propertyName, slot);
}

bool JSSVGSetElement::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    JSSVGSetElement* thisObject = jsCast<JSSVGSetElement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, &s_info);
    return getStaticValueDescriptor<JSSVGSetElement, Base>(exec, &JSSVGSetElementTable, thisObject, propertyName, descriptor);
}

JSValue jsSVGSetElementConstructor(ExecState* exec, JSValue slotBase, PropertyName)
{
    JSSVGSetElement* domObject = jsCast<JSSVGSetElement*>(asObject(slotBase));
    return JSSVGSetElement::getConstructor(exec, domObject->globalObject());
}

JSValue JSSVGSetElement::getConstructor(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGSetElementConstructor>(exec, jsCast<JSDOMGlobalObject*>(globalObject));
}


}

#endif // ENABLE(SVG)
