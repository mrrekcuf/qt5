/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBGL)

#include "JSWebGLCompressedTextureATC.h"

#include "WebGLCompressedTextureATC.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table for prototype */

static const HashTableValue JSWebGLCompressedTextureATCPrototypeTableValues[] =
{
    { "COMPRESSED_RGB_ATC_WEBGL", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebGLCompressedTextureATCCOMPRESSED_RGB_ATC_WEBGL), (intptr_t)0, NoIntrinsic },
    { "COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebGLCompressedTextureATCCOMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL), (intptr_t)0, NoIntrinsic },
    { "COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL", DontDelete | ReadOnly, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebGLCompressedTextureATCCOMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL), (intptr_t)0, NoIntrinsic },
    { 0, 0, 0, 0, NoIntrinsic }
};

static const HashTable JSWebGLCompressedTextureATCPrototypeTable = { 8, 7, JSWebGLCompressedTextureATCPrototypeTableValues, 0 };
const ClassInfo JSWebGLCompressedTextureATCPrototype::s_info = { "WebGLCompressedTextureATCPrototype", &Base::s_info, &JSWebGLCompressedTextureATCPrototypeTable, 0, CREATE_METHOD_TABLE(JSWebGLCompressedTextureATCPrototype) };

JSObject* JSWebGLCompressedTextureATCPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSWebGLCompressedTextureATC>(exec, globalObject);
}

bool JSWebGLCompressedTextureATCPrototype::getOwnPropertySlot(JSCell* cell, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSWebGLCompressedTextureATCPrototype* thisObject = jsCast<JSWebGLCompressedTextureATCPrototype*>(cell);
    return getStaticValueSlot<JSWebGLCompressedTextureATCPrototype, JSObject>(exec, &JSWebGLCompressedTextureATCPrototypeTable, thisObject, propertyName, slot);
}

bool JSWebGLCompressedTextureATCPrototype::getOwnPropertyDescriptor(JSObject* object, ExecState* exec, PropertyName propertyName, PropertyDescriptor& descriptor)
{
    JSWebGLCompressedTextureATCPrototype* thisObject = jsCast<JSWebGLCompressedTextureATCPrototype*>(object);
    return getStaticValueDescriptor<JSWebGLCompressedTextureATCPrototype, JSObject>(exec, &JSWebGLCompressedTextureATCPrototypeTable, thisObject, propertyName, descriptor);
}

const ClassInfo JSWebGLCompressedTextureATC::s_info = { "WebGLCompressedTextureATC", &Base::s_info, 0, 0 , CREATE_METHOD_TABLE(JSWebGLCompressedTextureATC) };

JSWebGLCompressedTextureATC::JSWebGLCompressedTextureATC(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<WebGLCompressedTextureATC> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSWebGLCompressedTextureATC::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(&s_info));
}

JSObject* JSWebGLCompressedTextureATC::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return JSWebGLCompressedTextureATCPrototype::create(exec->vm(), globalObject, JSWebGLCompressedTextureATCPrototype::createStructure(globalObject->vm(), globalObject, globalObject->objectPrototype()));
}

void JSWebGLCompressedTextureATC::destroy(JSC::JSCell* cell)
{
    JSWebGLCompressedTextureATC* thisObject = static_cast<JSWebGLCompressedTextureATC*>(cell);
    thisObject->JSWebGLCompressedTextureATC::~JSWebGLCompressedTextureATC();
}

JSWebGLCompressedTextureATC::~JSWebGLCompressedTextureATC()
{
    releaseImplIfNotNull();
}

// Constant getters

JSValue jsWebGLCompressedTextureATCCOMPRESSED_RGB_ATC_WEBGL(ExecState* exec, JSValue, PropertyName)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(0x8C92));
}

JSValue jsWebGLCompressedTextureATCCOMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL(ExecState* exec, JSValue, PropertyName)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(0x8C93));
}

JSValue jsWebGLCompressedTextureATCCOMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL(ExecState* exec, JSValue, PropertyName)
{
    UNUSED_PARAM(exec);
    return jsNumber(static_cast<int>(0x87EE));
}

static inline bool isObservable(JSWebGLCompressedTextureATC* jsWebGLCompressedTextureATC)
{
    if (jsWebGLCompressedTextureATC->hasCustomProperties())
        return true;
    return false;
}

bool JSWebGLCompressedTextureATCOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    JSWebGLCompressedTextureATC* jsWebGLCompressedTextureATC = jsCast<JSWebGLCompressedTextureATC*>(handle.get().asCell());
    if (!isObservable(jsWebGLCompressedTextureATC))
        return false;
    WebGLRenderingContext* root = jsWebGLCompressedTextureATC->impl()->context();
    return visitor.containsOpaqueRoot(root);
}

void JSWebGLCompressedTextureATCOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSWebGLCompressedTextureATC* jsWebGLCompressedTextureATC = jsCast<JSWebGLCompressedTextureATC*>(handle.get().asCell());
    DOMWrapperWorld* world = static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, jsWebGLCompressedTextureATC->impl(), jsWebGLCompressedTextureATC);
    jsWebGLCompressedTextureATC->releaseImpl();
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7WebGLCompressedTextureATC@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore25WebGLCompressedTextureATCE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, WebGLCompressedTextureATC* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSWebGLCompressedTextureATC>(exec, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7WebGLCompressedTextureATC@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore25WebGLCompressedTextureATCE[2];
#if COMPILER(CLANG) && COMPILER_SUPPORTS(CXX_STATIC_ASSERT)
    // If this fails WebGLCompressedTextureATC does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(WebGLCompressedTextureATC), WebGLCompressedTextureATC_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // WebGLCompressedTextureATC has subclasses. If WebGLCompressedTextureATC has subclasses that get passed
    // to toJS() we currently require WebGLCompressedTextureATC you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    ReportMemoryCost<WebGLCompressedTextureATC>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSWebGLCompressedTextureATC>(exec, globalObject, impl);
}

WebGLCompressedTextureATC* toWebGLCompressedTextureATC(JSC::JSValue value)
{
    return value.inherits(&JSWebGLCompressedTextureATC::s_info) ? jsCast<JSWebGLCompressedTextureATC*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(WEBGL)
