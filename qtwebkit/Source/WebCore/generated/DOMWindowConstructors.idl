partial interface DOMWindow {
    [Conditional=INDEXED_DATABASE] attribute IDBCursorConstructor IDBCursor;
    [Conditional=INDEXED_DATABASE] attribute IDBCursorWithValueConstructor IDBCursorWithValue;
    [Conditional=INDEXED_DATABASE] attribute IDBDatabaseConstructor IDBDatabase;
    [Conditional=INDEXED_DATABASE] attribute IDBFactoryConstructor IDBFactory;
    [Conditional=INDEXED_DATABASE] attribute IDBIndexConstructor IDBIndex;
    [Conditional=INDEXED_DATABASE] attribute IDBKeyRangeConstructor IDBKeyRange;
    [Conditional=INDEXED_DATABASE] attribute IDBObjectStoreConstructor IDBObjectStore;
    [Conditional=INDEXED_DATABASE] attribute IDBOpenDBRequestConstructor IDBOpenDBRequest;
    [Conditional=INDEXED_DATABASE] attribute IDBRequestConstructor IDBRequest;
    [Conditional=INDEXED_DATABASE] attribute IDBTransactionConstructor IDBTransaction;
    [Conditional=INDEXED_DATABASE] attribute IDBVersionChangeEventConstructor IDBVersionChangeEvent;
    [Conditional=NOTIFICATIONS|LEGACY_NOTIFICATIONS] attribute NotificationConstructor Notification;
    [Conditional=WEB_AUDIO] attribute AnalyserNodeConstructor AnalyserNode;
    [Conditional=WEB_AUDIO] attribute AudioBufferConstructor AudioBuffer;
    [Conditional=WEB_AUDIO] attribute AudioBufferSourceNodeConstructor AudioBufferSourceNode;
    [EnabledBySetting=WebAudio, Conditional=WEB_AUDIO] attribute AudioContextConstructor webkitAudioContext;
    [Conditional=WEB_AUDIO] attribute AudioDestinationNodeConstructor AudioDestinationNode;
    [Conditional=WEB_AUDIO] attribute AudioListenerConstructor AudioListener;
    [Conditional=WEB_AUDIO] attribute AudioNodeConstructor AudioNode;
    [Conditional=WEB_AUDIO] attribute AudioParamConstructor AudioParam;
    [Conditional=WEB_AUDIO] attribute AudioProcessingEventConstructor AudioProcessingEvent;
    [Conditional=WEB_AUDIO] attribute BiquadFilterNodeConstructor BiquadFilterNode;
    [Conditional=WEB_AUDIO] attribute ChannelMergerNodeConstructor ChannelMergerNode;
    [Conditional=WEB_AUDIO] attribute ChannelSplitterNodeConstructor ChannelSplitterNode;
    [Conditional=WEB_AUDIO] attribute ConvolverNodeConstructor ConvolverNode;
    [Conditional=WEB_AUDIO] attribute DelayNodeConstructor DelayNode;
    [Conditional=WEB_AUDIO] attribute DynamicsCompressorNodeConstructor DynamicsCompressorNode;
    [Conditional=WEB_AUDIO] attribute GainNodeConstructor GainNode;
    [Conditional=WEB_AUDIO&VIDEO] attribute MediaElementAudioSourceNodeConstructor MediaElementAudioSourceNode;
    [Conditional=WEB_AUDIO&MEDIA_STREAM] attribute MediaStreamAudioSourceNodeConstructor MediaStreamAudioSourceNode;
    [Conditional=WEB_AUDIO] attribute OfflineAudioCompletionEventConstructor OfflineAudioCompletionEvent;
    [Conditional=WEB_AUDIO] attribute OfflineAudioContextConstructor webkitOfflineAudioContext;
    [Conditional=WEB_AUDIO] attribute OscillatorNodeConstructor OscillatorNode;
    [Conditional=WEB_AUDIO] attribute PannerNodeConstructor webkitAudioPannerNode;
    [Conditional=WEB_AUDIO] attribute PeriodicWaveConstructor PeriodicWave;
    [Conditional=WEB_AUDIO] attribute ScriptProcessorNodeConstructor ScriptProcessorNode;
    [Conditional=WEB_AUDIO] attribute WaveShaperNodeConstructor WaveShaperNode;
    [Conditional=SQL_DATABASE] attribute SQLExceptionConstructor SQLException;
    attribute CloseEventConstructor CloseEvent;
    [EnabledAtRuntime, Conditional=WEB_SOCKETS] attribute WebSocketConstructor WebSocket;
    attribute CSSCharsetRuleConstructor CSSCharsetRule;
    attribute CSSFontFaceRuleConstructor CSSFontFaceRule;
    [Conditional=SHADOW_DOM] attribute CSSHostRuleConstructor CSSHostRule;
    attribute CSSImportRuleConstructor CSSImportRule;
    attribute CSSMediaRuleConstructor CSSMediaRule;
    attribute CSSPageRuleConstructor CSSPageRule;
    attribute CSSPrimitiveValueConstructor CSSPrimitiveValue;
    attribute CSSRuleConstructor CSSRule;
    attribute CSSRuleListConstructor CSSRuleList;
    attribute CSSStyleDeclarationConstructor CSSStyleDeclaration;
    attribute CSSStyleRuleConstructor CSSStyleRule;
    attribute CSSStyleSheetConstructor CSSStyleSheet;
    attribute CSSValueConstructor CSSValue;
    attribute CSSValueListConstructor CSSValueList;
    attribute CounterConstructor Counter;
    attribute MediaListConstructor MediaList;
    attribute RGBColorConstructor RGBColor;
    attribute RectConstructor Rect;
    attribute StyleSheetConstructor StyleSheet;
    attribute StyleSheetListConstructor StyleSheetList;
    [Conditional=CSS_SHADERS] attribute WebKitCSSFilterRuleConstructor WebKitCSSFilterRule;
    [Conditional=CSS_FILTERS] attribute WebKitCSSFilterValueConstructor WebKitCSSFilterValue;
    attribute WebKitCSSKeyframeRuleConstructor WebKitCSSKeyframeRule;
    attribute WebKitCSSKeyframesRuleConstructor WebKitCSSKeyframesRule;
    attribute WebKitCSSMatrixConstructor WebKitCSSMatrix;
    [Conditional=CSS_SHADERS] attribute WebKitCSSMixFunctionValueConstructor WebKitCSSMixFunctionValue;
    [Conditional=CSS_REGIONS] attribute WebKitCSSRegionRuleConstructor WebKitCSSRegionRule;
    attribute WebKitCSSTransformValueConstructor WebKitCSSTransformValue;
    [Conditional=CSS_DEVICE_ADAPTATION] attribute WebKitCSSViewportRuleConstructor WebKitCSSViewportRule;
    attribute AttrConstructor Attr;
    attribute BeforeLoadEventConstructor BeforeLoadEvent;
    attribute CDATASectionConstructor CDATASection;
    attribute CharacterDataConstructor CharacterData;
    attribute ClientRectConstructor ClientRect;
    attribute ClientRectListConstructor ClientRectList;
    attribute ClipboardConstructor Clipboard;
    attribute CommentConstructor Comment;
    attribute CompositionEventConstructor CompositionEvent;
    attribute CustomEventConstructor CustomEvent;
    attribute DOMCoreExceptionConstructor DOMException;
    attribute DOMImplementationConstructor DOMImplementation;
    attribute DOMStringListConstructor DOMStringList;
    attribute DOMStringMapConstructor DOMStringMap;
    [Conditional=DEVICE_ORIENTATION] attribute DeviceMotionEventConstructor DeviceMotionEvent;
    [Conditional=DEVICE_ORIENTATION] attribute DeviceOrientationEventConstructor DeviceOrientationEvent;
    attribute DocumentConstructor Document;
    attribute DocumentFragmentConstructor DocumentFragment;
    attribute DocumentTypeConstructor DocumentType;
    attribute ElementConstructor Element;
    attribute EntityConstructor Entity;
    attribute EntityReferenceConstructor EntityReference;
    attribute ErrorEventConstructor ErrorEvent;
    attribute EventConstructor Event;
    attribute EventExceptionConstructor EventException;
    attribute FocusEventConstructor FocusEvent;
    attribute HashChangeEventConstructor HashChangeEvent;
    attribute KeyboardEventConstructor KeyboardEvent;
    [Conditional=CHANNEL_MESSAGING] attribute MessageChannelConstructor MessageChannel;
    attribute MessageEventConstructor MessageEvent;
    attribute MessagePortConstructor MessagePort;
    attribute MouseEventConstructor MouseEvent;
    attribute MutationEventConstructor MutationEvent;
    attribute MutationObserverConstructor MutationObserver;
    attribute MutationRecordConstructor MutationRecord;
    attribute NamedNodeMapConstructor NamedNodeMap;
    attribute NodeConstructor Node;
    attribute NodeFilterConstructor NodeFilter;
    attribute NodeIteratorConstructor NodeIterator;
    attribute NodeListConstructor NodeList;
    attribute NotationConstructor Notation;
    attribute OverflowEventConstructor OverflowEvent;
    attribute PageTransitionEventConstructor PageTransitionEvent;
    attribute PopStateEventConstructor PopStateEvent;
    attribute ProcessingInstructionConstructor ProcessingInstruction;
    attribute ProgressEventConstructor ProgressEvent;
    [Conditional=MICRODATA] attribute PropertyNodeListConstructor PropertyNodeList;
    attribute RangeConstructor Range;
    attribute RangeExceptionConstructor RangeException;
    [Conditional=SHADOW_DOM] attribute ShadowRootConstructor WebKitShadowRoot;
    attribute TextConstructor Text;
    attribute TextEventConstructor TextEvent;
    [Conditional=TOUCH_EVENTS] attribute TouchConstructor Touch;
    [Conditional=TOUCH_EVENTS] attribute TouchEventConstructor TouchEvent;
    [Conditional=TOUCH_EVENTS] attribute TouchListConstructor TouchList;
    attribute TransitionEventConstructor TransitionEvent;
    attribute TreeWalkerConstructor TreeWalker;
    attribute UIEventConstructor UIEvent;
    attribute WebKitAnimationEventConstructor WebKitAnimationEvent;
    attribute WebKitTransitionEventConstructor WebKitTransitionEvent;
    attribute WheelEventConstructor WheelEvent;
    attribute BlobConstructor Blob;
    attribute FileConstructor File;
    [Conditional=BLOB|FILE_SYSTEM] attribute FileErrorConstructor FileError;
    attribute FileListConstructor FileList;
    [Conditional=BLOB] attribute FileReaderConstructor FileReader;
    attribute DOMFormDataConstructor FormData;
    attribute DOMSettableTokenListConstructor DOMSettableTokenList;
    attribute DOMTokenListConstructor DOMTokenList;
    [Conditional=BLOB] attribute DOMURLConstructor URL;
    attribute HTMLAllCollectionConstructor HTMLAllCollection;
    attribute HTMLAnchorElementConstructor HTMLAnchorElement;
    attribute HTMLAppletElementConstructor HTMLAppletElement;
    attribute HTMLAreaElementConstructor HTMLAreaElement;
    [EnabledAtRuntime, Conditional=VIDEO] attribute HTMLAudioElementConstructor HTMLAudioElement;
    [EnabledAtRuntime, Conditional=VIDEO] attribute HTMLAudioElementNamedConstructor Audio;
    attribute HTMLBRElementConstructor HTMLBRElement;
    attribute HTMLBaseElementConstructor HTMLBaseElement;
    attribute HTMLBaseFontElementConstructor HTMLBaseFontElement;
    attribute HTMLBodyElementConstructor HTMLBodyElement;
    attribute HTMLButtonElementConstructor HTMLButtonElement;
    attribute HTMLCanvasElementConstructor HTMLCanvasElement;
    attribute HTMLCollectionConstructor HTMLCollection;
    attribute HTMLDListElementConstructor HTMLDListElement;
    [Conditional=DATALIST_ELEMENT] attribute HTMLDataListElementConstructor HTMLDataListElement;
    [Conditional=DIALOG_ELEMENT] attribute HTMLDialogElementConstructor HTMLDialogElement;
    attribute HTMLDirectoryElementConstructor HTMLDirectoryElement;
    attribute HTMLDivElementConstructor HTMLDivElement;
    attribute HTMLDocumentConstructor HTMLDocument;
    attribute HTMLElementConstructor HTMLElement;
    attribute HTMLEmbedElementConstructor HTMLEmbedElement;
    attribute HTMLFieldSetElementConstructor HTMLFieldSetElement;
    attribute HTMLFontElementConstructor HTMLFontElement;
    attribute HTMLFormControlsCollectionConstructor HTMLFormControlsCollection;
    attribute HTMLFormElementConstructor HTMLFormElement;
    attribute HTMLFrameElementConstructor HTMLFrameElement;
    attribute HTMLFrameSetElementConstructor HTMLFrameSetElement;
    attribute HTMLHRElementConstructor HTMLHRElement;
    attribute HTMLHeadElementConstructor HTMLHeadElement;
    attribute HTMLHeadingElementConstructor HTMLHeadingElement;
    attribute HTMLHtmlElementConstructor HTMLHtmlElement;
    attribute HTMLIFrameElementConstructor HTMLIFrameElement;
    attribute HTMLImageElementConstructor HTMLImageElement;
    attribute HTMLInputElementConstructor HTMLInputElement;
    attribute HTMLKeygenElementConstructor HTMLKeygenElement;
    attribute HTMLLIElementConstructor HTMLLIElement;
    attribute HTMLLabelElementConstructor HTMLLabelElement;
    attribute HTMLLegendElementConstructor HTMLLegendElement;
    attribute HTMLLinkElementConstructor HTMLLinkElement;
    attribute HTMLMapElementConstructor HTMLMapElement;
    attribute HTMLMarqueeElementConstructor HTMLMarqueeElement;
    [Conditional=VIDEO] attribute HTMLMediaElementConstructor HTMLMediaElement;
    attribute HTMLMenuElementConstructor HTMLMenuElement;
    attribute HTMLMetaElementConstructor HTMLMetaElement;
    [Conditional=METER_ELEMENT] attribute HTMLMeterElementConstructor HTMLMeterElement;
    attribute HTMLModElementConstructor HTMLModElement;
    attribute HTMLOListElementConstructor HTMLOListElement;
    attribute HTMLObjectElementConstructor HTMLObjectElement;
    attribute HTMLOptGroupElementConstructor HTMLOptGroupElement;
    attribute HTMLOptionElementConstructor HTMLOptionElement;
    attribute HTMLOptionElementNamedConstructor Option;
    attribute HTMLOptionsCollectionConstructor HTMLOptionsCollection;
    attribute HTMLOutputElementConstructor HTMLOutputElement;
    attribute HTMLParagraphElementConstructor HTMLParagraphElement;
    attribute HTMLParamElementConstructor HTMLParamElement;
    attribute HTMLPreElementConstructor HTMLPreElement;
    [Conditional=PROGRESS_ELEMENT] attribute HTMLProgressElementConstructor HTMLProgressElement;
    [Conditional=MICRODATA] attribute HTMLPropertiesCollectionConstructor HTMLPropertiesCollection;
    attribute HTMLQuoteElementConstructor HTMLQuoteElement;
    attribute HTMLScriptElementConstructor HTMLScriptElement;
    attribute HTMLSelectElementConstructor HTMLSelectElement;
    [Conditional=VIDEO] attribute HTMLSourceElementConstructor HTMLSourceElement;
    attribute HTMLSpanElementConstructor HTMLSpanElement;
    attribute HTMLStyleElementConstructor HTMLStyleElement;
    attribute HTMLTableCaptionElementConstructor HTMLTableCaptionElement;
    attribute HTMLTableCellElementConstructor HTMLTableCellElement;
    attribute HTMLTableColElementConstructor HTMLTableColElement;
    attribute HTMLTableElementConstructor HTMLTableElement;
    attribute HTMLTableRowElementConstructor HTMLTableRowElement;
    attribute HTMLTableSectionElementConstructor HTMLTableSectionElement;
    attribute HTMLTextAreaElementConstructor HTMLTextAreaElement;
    attribute HTMLTitleElementConstructor HTMLTitleElement;
    [Conditional=VIDEO_TRACK] attribute HTMLTrackElementConstructor HTMLTrackElement;
    attribute HTMLUListElementConstructor HTMLUListElement;
    attribute HTMLUnknownElementConstructor HTMLUnknownElement;
    [Conditional=VIDEO] attribute HTMLVideoElementConstructor HTMLVideoElement;
    attribute ImageDataConstructor ImageData;
    [Conditional=VIDEO] attribute MediaControllerConstructor MediaController;
    [Conditional=VIDEO] attribute MediaErrorConstructor MediaError;
    attribute TextMetricsConstructor TextMetrics;
    [Conditional=VIDEO] attribute TimeRangesConstructor TimeRanges;
    attribute ArrayBufferConstructor ArrayBuffer;
    attribute ArrayBufferViewConstructor ArrayBufferView;
    attribute CanvasGradientConstructor CanvasGradient;
    attribute CanvasPatternConstructor CanvasPattern;
    [Conditional=CANVAS_PROXY] attribute CanvasProxyConstructor CanvasProxy;
    attribute CanvasRenderingContext2DConstructor CanvasRenderingContext2D;
    [Conditional=CANVAS_PATH] attribute DOMPathConstructor Path;
    attribute DataViewConstructor DataView;
    attribute Float32ArrayConstructor Float32Array;
    attribute Float64ArrayConstructor Float64Array;
    attribute Int16ArrayConstructor Int16Array;
    attribute Int32ArrayConstructor Int32Array;
    attribute Int8ArrayConstructor Int8Array;
    attribute Uint16ArrayConstructor Uint16Array;
    attribute Uint32ArrayConstructor Uint32Array;
    attribute Uint8ArrayConstructor Uint8Array;
    attribute Uint8ClampedArrayConstructor Uint8ClampedArray;
    [Conditional=WEBGL] attribute WebGLActiveInfoConstructor WebGLActiveInfo;
    [Conditional=WEBGL] attribute WebGLBufferConstructor WebGLBuffer;
    [Conditional=WEBGL] attribute WebGLContextEventConstructor WebGLContextEvent;
    [Conditional=WEBGL] attribute WebGLFramebufferConstructor WebGLFramebuffer;
    [Conditional=WEBGL] attribute WebGLProgramConstructor WebGLProgram;
    [Conditional=WEBGL] attribute WebGLRenderbufferConstructor WebGLRenderbuffer;
    [Conditional=WEBGL] attribute WebGLRenderingContextConstructor WebGLRenderingContext;
    [Conditional=WEBGL] attribute WebGLShaderConstructor WebGLShader;
    [Conditional=WEBGL] attribute WebGLShaderPrecisionFormatConstructor WebGLShaderPrecisionFormat;
    [Conditional=WEBGL] attribute WebGLTextureConstructor WebGLTexture;
    [Conditional=WEBGL] attribute WebGLUniformLocationConstructor WebGLUniformLocation;
    [Conditional=SHADOW_DOM] attribute HTMLContentElementConstructor HTMLContentElement;
    [Conditional=VIDEO_TRACK] attribute TextTrackConstructor TextTrack;
    [Conditional=VIDEO_TRACK] attribute TextTrackCueConstructor TextTrackCue;
    [Conditional=VIDEO_TRACK] attribute TextTrackCueListConstructor TextTrackCueList;
    [Conditional=VIDEO_TRACK] attribute TextTrackListConstructor TextTrackList;
    [Conditional=VIDEO_TRACK] attribute TrackEventConstructor TrackEvent;
    attribute BarPropConstructor BarProp;
    [Conditional=CSP_NEXT] attribute DOMSecurityPolicyConstructor SecurityPolicy;
    attribute DOMSelectionConstructor Selection;
    attribute DOMWindowConstructor Window;
    attribute EventSourceConstructor EventSource;
    attribute HistoryConstructor History;
    attribute LocationConstructor Location;
    attribute NavigatorConstructor Navigator;
    [Conditional=WEB_TIMING] attribute PerformanceConstructor Performance;
    [Conditional=PERFORMANCE_TIMELINE] attribute PerformanceEntryConstructor PerformanceEntry;
    [Conditional=WEB_TIMING] attribute PerformanceNavigationConstructor PerformanceNavigation;
    [Conditional=RESOURCE_TIMING] attribute PerformanceResourceTimingConstructor PerformanceResourceTiming;
    [Conditional=WEB_TIMING] attribute PerformanceTimingConstructor PerformanceTiming;
    attribute ScreenConstructor Screen;
    [Conditional=INPUT_SPEECH] attribute SpeechInputEventConstructor SpeechInputEvent;
    attribute WebKitPointConstructor WebKitPoint;
    attribute DOMMimeTypeConstructor MimeType;
    attribute DOMMimeTypeArrayConstructor MimeTypeArray;
    attribute DOMPluginConstructor Plugin;
    attribute DOMPluginArrayConstructor PluginArray;
    attribute StorageConstructor Storage;
    attribute StorageEventConstructor StorageEvent;
    [Conditional=SVG] attribute SVGAElementConstructor SVGAElement;
    [Conditional=SVG&SVG_FONTS] attribute SVGAltGlyphDefElementConstructor SVGAltGlyphDefElement;
    [Conditional=SVG&SVG_FONTS] attribute SVGAltGlyphElementConstructor SVGAltGlyphElement;
    [Conditional=SVG&SVG_FONTS] attribute SVGAltGlyphItemElementConstructor SVGAltGlyphItemElement;
    [Conditional=SVG] attribute SVGAngleConstructor SVGAngle;
    [Conditional=SVG] attribute SVGAnimateColorElementConstructor SVGAnimateColorElement;
    [Conditional=SVG] attribute SVGAnimateElementConstructor SVGAnimateElement;
    [Conditional=SVG] attribute SVGAnimateMotionElementConstructor SVGAnimateMotionElement;
    [Conditional=SVG] attribute SVGAnimateTransformElementConstructor SVGAnimateTransformElement;
    [Conditional=SVG] attribute SVGAnimatedAngleConstructor SVGAnimatedAngle;
    [Conditional=SVG] attribute SVGAnimatedBooleanConstructor SVGAnimatedBoolean;
    [Conditional=SVG] attribute SVGAnimatedEnumerationConstructor SVGAnimatedEnumeration;
    [Conditional=SVG] attribute SVGAnimatedIntegerConstructor SVGAnimatedInteger;
    [Conditional=SVG] attribute SVGAnimatedLengthConstructor SVGAnimatedLength;
    [Conditional=SVG] attribute SVGAnimatedLengthListConstructor SVGAnimatedLengthList;
    [Conditional=SVG] attribute SVGAnimatedNumberConstructor SVGAnimatedNumber;
    [Conditional=SVG] attribute SVGAnimatedNumberListConstructor SVGAnimatedNumberList;
    [Conditional=SVG] attribute SVGAnimatedPreserveAspectRatioConstructor SVGAnimatedPreserveAspectRatio;
    [Conditional=SVG] attribute SVGAnimatedRectConstructor SVGAnimatedRect;
    [Conditional=SVG] attribute SVGAnimatedStringConstructor SVGAnimatedString;
    [Conditional=SVG] attribute SVGAnimatedTransformListConstructor SVGAnimatedTransformList;
    [Conditional=SVG] attribute SVGAnimationElementConstructor SVGAnimationElement;
    [Conditional=SVG] attribute SVGCircleElementConstructor SVGCircleElement;
    [Conditional=SVG] attribute SVGClipPathElementConstructor SVGClipPathElement;
    [Conditional=SVG] attribute SVGColorConstructor SVGColor;
    [Conditional=SVG&FILTERS] attribute SVGComponentTransferFunctionElementConstructor SVGComponentTransferFunctionElement;
    [Conditional=SVG] attribute SVGCursorElementConstructor SVGCursorElement;
    [Conditional=SVG] attribute SVGDefsElementConstructor SVGDefsElement;
    [Conditional=SVG] attribute SVGDescElementConstructor SVGDescElement;
    [Conditional=SVG] attribute SVGDocumentConstructor SVGDocument;
    [Conditional=SVG] attribute SVGElementConstructor SVGElement;
    [Conditional=SVG] attribute SVGElementInstanceConstructor SVGElementInstance;
    [Conditional=SVG] attribute SVGElementInstanceListConstructor SVGElementInstanceList;
    [Conditional=SVG] attribute SVGEllipseElementConstructor SVGEllipseElement;
    [Conditional=SVG] attribute SVGExceptionConstructor SVGException;
    [Conditional=SVG&FILTERS] attribute SVGFEBlendElementConstructor SVGFEBlendElement;
    [Conditional=SVG&FILTERS] attribute SVGFEColorMatrixElementConstructor SVGFEColorMatrixElement;
    [Conditional=SVG&FILTERS] attribute SVGFEComponentTransferElementConstructor SVGFEComponentTransferElement;
    [Conditional=SVG&FILTERS] attribute SVGFECompositeElementConstructor SVGFECompositeElement;
    [Conditional=SVG&FILTERS] attribute SVGFEConvolveMatrixElementConstructor SVGFEConvolveMatrixElement;
    [Conditional=SVG&FILTERS] attribute SVGFEDiffuseLightingElementConstructor SVGFEDiffuseLightingElement;
    [Conditional=SVG&FILTERS] attribute SVGFEDisplacementMapElementConstructor SVGFEDisplacementMapElement;
    [Conditional=SVG&FILTERS] attribute SVGFEDistantLightElementConstructor SVGFEDistantLightElement;
    [Conditional=SVG&FILTERS] attribute SVGFEDropShadowElementConstructor SVGFEDropShadowElement;
    [Conditional=SVG&FILTERS] attribute SVGFEFloodElementConstructor SVGFEFloodElement;
    [Conditional=SVG&FILTERS] attribute SVGFEFuncAElementConstructor SVGFEFuncAElement;
    [Conditional=SVG&FILTERS] attribute SVGFEFuncBElementConstructor SVGFEFuncBElement;
    [Conditional=SVG&FILTERS] attribute SVGFEFuncGElementConstructor SVGFEFuncGElement;
    [Conditional=SVG&FILTERS] attribute SVGFEFuncRElementConstructor SVGFEFuncRElement;
    [Conditional=SVG&FILTERS] attribute SVGFEGaussianBlurElementConstructor SVGFEGaussianBlurElement;
    [Conditional=SVG&FILTERS] attribute SVGFEImageElementConstructor SVGFEImageElement;
    [Conditional=SVG&FILTERS] attribute SVGFEMergeElementConstructor SVGFEMergeElement;
    [Conditional=SVG&FILTERS] attribute SVGFEMergeNodeElementConstructor SVGFEMergeNodeElement;
    [Conditional=SVG&FILTERS] attribute SVGFEMorphologyElementConstructor SVGFEMorphologyElement;
    [Conditional=SVG&FILTERS] attribute SVGFEOffsetElementConstructor SVGFEOffsetElement;
    [Conditional=SVG&FILTERS] attribute SVGFEPointLightElementConstructor SVGFEPointLightElement;
    [Conditional=SVG&FILTERS] attribute SVGFESpecularLightingElementConstructor SVGFESpecularLightingElement;
    [Conditional=SVG&FILTERS] attribute SVGFESpotLightElementConstructor SVGFESpotLightElement;
    [Conditional=SVG&FILTERS] attribute SVGFETileElementConstructor SVGFETileElement;
    [Conditional=SVG&FILTERS] attribute SVGFETurbulenceElementConstructor SVGFETurbulenceElement;
    [Conditional=SVG&FILTERS] attribute SVGFilterElementConstructor SVGFilterElement;
    [Conditional=SVG&SVG_FONTS] attribute SVGFontElementConstructor SVGFontElement;
    [Conditional=SVG&SVG_FONTS] attribute SVGFontFaceElementConstructor SVGFontFaceElement;
    [Conditional=SVG&SVG_FONTS] attribute SVGFontFaceFormatElementConstructor SVGFontFaceFormatElement;
    [Conditional=SVG&SVG_FONTS] attribute SVGFontFaceNameElementConstructor SVGFontFaceNameElement;
    [Conditional=SVG&SVG_FONTS] attribute SVGFontFaceSrcElementConstructor SVGFontFaceSrcElement;
    [Conditional=SVG&SVG_FONTS] attribute SVGFontFaceUriElementConstructor SVGFontFaceUriElement;
    [Conditional=SVG] attribute SVGForeignObjectElementConstructor SVGForeignObjectElement;
    [Conditional=SVG] attribute SVGGElementConstructor SVGGElement;
    [Conditional=SVG&SVG_FONTS] attribute SVGGlyphElementConstructor SVGGlyphElement;
    [Conditional=SVG&SVG_FONTS] attribute SVGGlyphRefElementConstructor SVGGlyphRefElement;
    [Conditional=SVG] attribute SVGGradientElementConstructor SVGGradientElement;
    [Conditional=SVG] attribute SVGGraphicsElementConstructor SVGGraphicsElement;
    [Conditional=SVG&SVG_FONTS] attribute SVGHKernElementConstructor SVGHKernElement;
    [Conditional=SVG] attribute SVGImageElementConstructor SVGImageElement;
    [Conditional=SVG] attribute SVGLengthConstructor SVGLength;
    [Conditional=SVG] attribute SVGLengthListConstructor SVGLengthList;
    [Conditional=SVG] attribute SVGLineElementConstructor SVGLineElement;
    [Conditional=SVG] attribute SVGLinearGradientElementConstructor SVGLinearGradientElement;
    [Conditional=SVG] attribute SVGMPathElementConstructor SVGMPathElement;
    [Conditional=SVG] attribute SVGMarkerElementConstructor SVGMarkerElement;
    [Conditional=SVG] attribute SVGMaskElementConstructor SVGMaskElement;
    [Conditional=SVG] attribute SVGMatrixConstructor SVGMatrix;
    [Conditional=SVG] attribute SVGMetadataElementConstructor SVGMetadataElement;
    [Conditional=SVG&SVG_FONTS] attribute SVGMissingGlyphElementConstructor SVGMissingGlyphElement;
    [Conditional=SVG] attribute SVGNumberConstructor SVGNumber;
    [Conditional=SVG] attribute SVGNumberListConstructor SVGNumberList;
    [Conditional=SVG] attribute SVGPaintConstructor SVGPaint;
    [Conditional=SVG] attribute SVGPathElementConstructor SVGPathElement;
    [Conditional=SVG] attribute SVGPathSegConstructor SVGPathSeg;
    [Conditional=SVG] attribute SVGPathSegArcAbsConstructor SVGPathSegArcAbs;
    [Conditional=SVG] attribute SVGPathSegArcRelConstructor SVGPathSegArcRel;
    [Conditional=SVG] attribute SVGPathSegClosePathConstructor SVGPathSegClosePath;
    [Conditional=SVG] attribute SVGPathSegCurvetoCubicAbsConstructor SVGPathSegCurvetoCubicAbs;
    [Conditional=SVG] attribute SVGPathSegCurvetoCubicRelConstructor SVGPathSegCurvetoCubicRel;
    [Conditional=SVG] attribute SVGPathSegCurvetoCubicSmoothAbsConstructor SVGPathSegCurvetoCubicSmoothAbs;
    [Conditional=SVG] attribute SVGPathSegCurvetoCubicSmoothRelConstructor SVGPathSegCurvetoCubicSmoothRel;
    [Conditional=SVG] attribute SVGPathSegCurvetoQuadraticAbsConstructor SVGPathSegCurvetoQuadraticAbs;
    [Conditional=SVG] attribute SVGPathSegCurvetoQuadraticRelConstructor SVGPathSegCurvetoQuadraticRel;
    [Conditional=SVG] attribute SVGPathSegCurvetoQuadraticSmoothAbsConstructor SVGPathSegCurvetoQuadraticSmoothAbs;
    [Conditional=SVG] attribute SVGPathSegCurvetoQuadraticSmoothRelConstructor SVGPathSegCurvetoQuadraticSmoothRel;
    [Conditional=SVG] attribute SVGPathSegLinetoAbsConstructor SVGPathSegLinetoAbs;
    [Conditional=SVG] attribute SVGPathSegLinetoHorizontalAbsConstructor SVGPathSegLinetoHorizontalAbs;
    [Conditional=SVG] attribute SVGPathSegLinetoHorizontalRelConstructor SVGPathSegLinetoHorizontalRel;
    [Conditional=SVG] attribute SVGPathSegLinetoRelConstructor SVGPathSegLinetoRel;
    [Conditional=SVG] attribute SVGPathSegLinetoVerticalAbsConstructor SVGPathSegLinetoVerticalAbs;
    [Conditional=SVG] attribute SVGPathSegLinetoVerticalRelConstructor SVGPathSegLinetoVerticalRel;
    [Conditional=SVG] attribute SVGPathSegListConstructor SVGPathSegList;
    [Conditional=SVG] attribute SVGPathSegMovetoAbsConstructor SVGPathSegMovetoAbs;
    [Conditional=SVG] attribute SVGPathSegMovetoRelConstructor SVGPathSegMovetoRel;
    [Conditional=SVG] attribute SVGPatternElementConstructor SVGPatternElement;
    [Conditional=SVG] attribute SVGPointConstructor SVGPoint;
    [Conditional=SVG] attribute SVGPointListConstructor SVGPointList;
    [Conditional=SVG] attribute SVGPolygonElementConstructor SVGPolygonElement;
    [Conditional=SVG] attribute SVGPolylineElementConstructor SVGPolylineElement;
    [Conditional=SVG] attribute SVGPreserveAspectRatioConstructor SVGPreserveAspectRatio;
    [Conditional=SVG] attribute SVGRadialGradientElementConstructor SVGRadialGradientElement;
    [Conditional=SVG] attribute SVGRectConstructor SVGRect;
    [Conditional=SVG] attribute SVGRectElementConstructor SVGRectElement;
    [Conditional=SVG] attribute SVGRenderingIntentConstructor SVGRenderingIntent;
    [Conditional=SVG] attribute SVGSVGElementConstructor SVGSVGElement;
    [Conditional=SVG] attribute SVGScriptElementConstructor SVGScriptElement;
    [Conditional=SVG] attribute SVGSetElementConstructor SVGSetElement;
    [Conditional=SVG] attribute SVGStopElementConstructor SVGStopElement;
    [Conditional=SVG] attribute SVGStringListConstructor SVGStringList;
    [Conditional=SVG] attribute SVGStyleElementConstructor SVGStyleElement;
    [Conditional=SVG] attribute SVGSwitchElementConstructor SVGSwitchElement;
    [Conditional=SVG] attribute SVGSymbolElementConstructor SVGSymbolElement;
    [Conditional=SVG] attribute SVGTRefElementConstructor SVGTRefElement;
    [Conditional=SVG] attribute SVGTSpanElementConstructor SVGTSpanElement;
    [Conditional=SVG] attribute SVGTextContentElementConstructor SVGTextContentElement;
    [Conditional=SVG] attribute SVGTextElementConstructor SVGTextElement;
    [Conditional=SVG] attribute SVGTextPathElementConstructor SVGTextPathElement;
    [Conditional=SVG] attribute SVGTextPositioningElementConstructor SVGTextPositioningElement;
    [Conditional=SVG] attribute SVGTitleElementConstructor SVGTitleElement;
    [Conditional=SVG] attribute SVGTransformConstructor SVGTransform;
    [Conditional=SVG] attribute SVGTransformListConstructor SVGTransformList;
    [Conditional=SVG] attribute SVGUnitTypesConstructor SVGUnitTypes;
    [Conditional=SVG] attribute SVGUseElementConstructor SVGUseElement;
    [Conditional=SVG&SVG_FONTS] attribute SVGVKernElementConstructor SVGVKernElement;
    [Conditional=SVG] attribute SVGViewElementConstructor SVGViewElement;
    [Conditional=SVG] attribute SVGViewSpecConstructor SVGViewSpec;
    [Conditional=SVG] attribute SVGZoomEventConstructor SVGZoomEvent;
    [Conditional=SHARED_WORKERS, EnabledAtRuntime] attribute SharedWorkerConstructor SharedWorker;
    [Conditional=WORKERS] attribute WorkerConstructor Worker;
    attribute DOMParserConstructor DOMParser;
    attribute XMLHttpRequestConstructor XMLHttpRequest;
    attribute XMLHttpRequestExceptionConstructor XMLHttpRequestException;
    attribute XMLHttpRequestProgressEventConstructor XMLHttpRequestProgressEvent;
    attribute XMLHttpRequestUploadConstructor XMLHttpRequestUpload;
    attribute XMLSerializerConstructor XMLSerializer;
    attribute XPathEvaluatorConstructor XPathEvaluator;
    attribute XPathExceptionConstructor XPathException;
    attribute XPathExpressionConstructor XPathExpression;
    attribute XPathResultConstructor XPathResult;
    [Conditional=XSLT] attribute XSLTProcessorConstructor XSLTProcessor;
};
